-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Dapi.Subscription exposing (ProfileAggregateOptionalArguments, ProfileByPkRequiredArguments, ProfileOptionalArguments, profile, profile_aggregate, profile_by_pk)

import Dapi.Enum.Profile_select_column
import Dapi.InputObject
import Dapi.Interface
import Dapi.Object
import Dapi.Scalar
import Dapi.ScalarCodecs
import Dapi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ProfileOptionalArguments =
    { distinct_on : OptionalArgument (List Dapi.Enum.Profile_select_column.Profile_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dapi.InputObject.Profile_order_by)
    , where_ : OptionalArgument Dapi.InputObject.Profile_bool_exp
    }


{-| fetch data from the table: "profile"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
profile : (ProfileOptionalArguments -> ProfileOptionalArguments) -> SelectionSet decodesTo Dapi.Object.Profile -> SelectionSet (List decodesTo) RootSubscription
profile fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Dapi.Enum.Profile_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Dapi.InputObject.encodeProfile_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Dapi.InputObject.encodeProfile_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "profile" optionalArgs object_ (identity >> Decode.list)


type alias ProfileAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Dapi.Enum.Profile_select_column.Profile_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dapi.InputObject.Profile_order_by)
    , where_ : OptionalArgument Dapi.InputObject.Profile_bool_exp
    }


{-| fetch aggregated fields from the table: "profile"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
profile_aggregate : (ProfileAggregateOptionalArguments -> ProfileAggregateOptionalArguments) -> SelectionSet decodesTo Dapi.Object.Profile_aggregate -> SelectionSet decodesTo RootSubscription
profile_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Dapi.Enum.Profile_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Dapi.InputObject.encodeProfile_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Dapi.InputObject.encodeProfile_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "profile_aggregate" optionalArgs object_ identity


type alias ProfileByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "profile" using primary key columns
-}
profile_by_pk : ProfileByPkRequiredArguments -> SelectionSet decodesTo Dapi.Object.Profile -> SelectionSet (Maybe decodesTo) RootSubscription
profile_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "profile_by_pk" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)
