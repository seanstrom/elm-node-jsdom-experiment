-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Dapi.Mutation exposing (DeleteProfileRequiredArguments, InsertProfileOptionalArguments, InsertProfileRequiredArguments, UpdateProfileOptionalArguments, UpdateProfileRequiredArguments, delete_profile, insert_profile, update_profile)

import Dapi.InputObject
import Dapi.Interface
import Dapi.Object
import Dapi.Scalar
import Dapi.ScalarCodecs
import Dapi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias DeleteProfileRequiredArguments =
    { where_ : Dapi.InputObject.Profile_bool_exp }


{-| delete data from the table: "profile"

  - where\_ - filter the rows which have to be deleted

-}
delete_profile : DeleteProfileRequiredArguments -> SelectionSet decodesTo Dapi.Object.Profile_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
delete_profile requiredArgs object_ =
    Object.selectionForCompositeField "delete_profile" [ Argument.required "where" requiredArgs.where_ Dapi.InputObject.encodeProfile_bool_exp ] object_ (identity >> Decode.nullable)


type alias InsertProfileOptionalArguments =
    { on_conflict : OptionalArgument Dapi.InputObject.Profile_on_conflict }


type alias InsertProfileRequiredArguments =
    { objects : List Dapi.InputObject.Profile_insert_input }


{-| insert data into the table: "profile"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_profile : (InsertProfileOptionalArguments -> InsertProfileOptionalArguments) -> InsertProfileRequiredArguments -> SelectionSet decodesTo Dapi.Object.Profile_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
insert_profile fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { on_conflict = Absent }

        optionalArgs =
            [ Argument.optional "on_conflict" filledInOptionals.on_conflict Dapi.InputObject.encodeProfile_on_conflict ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "insert_profile" (optionalArgs ++ [ Argument.required "objects" requiredArgs.objects (Dapi.InputObject.encodeProfile_insert_input |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias UpdateProfileOptionalArguments =
    { inc_ : OptionalArgument Dapi.InputObject.Profile_inc_input
    , set_ : OptionalArgument Dapi.InputObject.Profile_set_input
    }


type alias UpdateProfileRequiredArguments =
    { where_ : Dapi.InputObject.Profile_bool_exp }


{-| update data of the table: "profile"

  - inc\_ - increments the integer columns with given value of the filtered values
  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_profile : (UpdateProfileOptionalArguments -> UpdateProfileOptionalArguments) -> UpdateProfileRequiredArguments -> SelectionSet decodesTo Dapi.Object.Profile_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
update_profile fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { inc_ = Absent, set_ = Absent }

        optionalArgs =
            [ Argument.optional "_inc" filledInOptionals.inc_ Dapi.InputObject.encodeProfile_inc_input, Argument.optional "_set" filledInOptionals.set_ Dapi.InputObject.encodeProfile_set_input ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_profile" (optionalArgs ++ [ Argument.required "where" requiredArgs.where_ Dapi.InputObject.encodeProfile_bool_exp ]) object_ (identity >> Decode.nullable)
